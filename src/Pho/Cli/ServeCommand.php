<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Cli;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;

use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;

class ServeCommand extends Command
{

    protected $server, $kernel, $founder;

    protected function configure()
    {
        $this
            ->setName('serve')
            ->setDescription('Run server based on pho Graph ')
            ->addOption('kernel', 'k',  InputOption::VALUE_OPTIONAL, 'Kernel path');

    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $kernel_path = $input->getOption('kernel');

        if (empty($kernel_path) || !file_exists($kernel_path))  {
            var_dump($kernel_path);
            throw new \InvalidArgumentException('Kernel path not exists;');
            return;
        }

        include_once(rtrim($kernel_path, DIRECTORY_SEPARATOR ) . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php');


        $dotenv = new Dotenv\Dotenv($kernel_path);
        $dotenv->load();
        
        if ( ! class_exists('\\Pho\\Kernel\\Kernel')) {
            throw new \InvalidArgumentException('Kernel class not founded in current path:' . $kernel_path);
            return;
        }
        
        $configs = array(
          "services"=>array(
                "database" => getenv('DATABASE_URI'),
                "storage" => getenv("STORAGE_URI"),
          ),
          "default_objects" => array(
                "graph" => class_exists(getenv('DEFAULT_GRAPH_CLASS')) ? getenv('DEFAULT_GRAPH_CLASS') : class_exists(\PhoNetworksAutogenerated\Twitter::class) ? \PhoNetworksAutogenerated\Twitter::class : ( class_exists(\PhoNetworksAutogenerated\Facebook::class) ? \PhoNetworksAutogenerated\Facebook::class : \PhoNetworksAutogenerated\Graph::class ),
                "founder" => class_exists(getenv('DEFAULT_GRAPH_CLASS')) ? getenv('DEFAULT_GRAPH_CLASS') : User::class,
          )
        );

        $this->kernel = new \Pho\Kernel\Kernel($this->config);
        $this->founder = new \PhoNetworksAutogenerated\User($this->kernel, $this->kernel->space(), $input->getOption('password'));
        $this->kernel->boot($this->founder);


        $this->server = new \Pho\Server\Rest\Daemon($this->kernel);
        $this->server->setPort(1337);
        //eval(\Psy\sh());
        $this->server->serve($input->getOption('port'), $input->getOption('host'));
    }
}
